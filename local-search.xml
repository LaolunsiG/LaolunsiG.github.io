<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Git 常用指令解释</title>
    <link href="/2024/08/17/%E6%95%99%E7%A8%8B/Git%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/Git%20%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E8%A7%A3%E9%87%8A/"/>
    <url>/2024/08/17/%E6%95%99%E7%A8%8B/Git%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/Git%20%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E8%A7%A3%E9%87%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="Git-常用指令解释"><a href="#Git-常用指令解释" class="headerlink" title="Git 常用指令解释"></a>Git 常用指令解释</h1><p># 观前提示</p><p>## 注释符号</p><ul><li>[]（方括号）：通常表示这是一个可选项，可能需要替换为实际值，也可能不需要填写。</li><li>&lt;&gt;（尖括号）：通常表示这是一个必填项，应该替换为实际值。</li></ul><p>## Git 工作原理</p><ul><li>工作区：是你实际编辑文件的地方。</li><li>远程仓库</li><li>本地仓库：是存储所有提交历史记录的地方。本地仓库也位于 .git 文件夹中，但它包含了项目的整个历史记录、所有的分支、标签和提交对象。具体来说，本地仓库的数据主要存储在 .git&#x2F;objects 和 .git&#x2F;refs 目录下。</li><li>存储区（暂存区）：是一个临时区域，用于准备提交的更改。暂存区是 Git 在 .git 文件夹内的一个特定区域，通常由一个名为 index 的文件来表示。这个文件位于 .git&#x2F;index 路径下。</li></ul><h2 id="Git-基本指令的使用-CSDN-查看"><a href="#Git-基本指令的使用-CSDN-查看" class="headerlink" title="Git 基本指令的使用 - CSDN 查看"></a><a href="https://blog.csdn.net/qtiao/article/details/97783243">Git 基本指令的使用</a> - CSDN 查看</h2><ul><li><code>-u</code>：<code>--set-upstream</code> 的缩写，表示将本地分支与远程分支关联起来，以后在这个分支上执行 <code>git pull</code> 和 <code>git push</code> 时，无需指定远程仓库和分支名。</li></ul><p># git config：配置信息</p><p># <code>git add</code> 添加文件到缓存命令</p><ul><li>‘.’ 代表该目录下的所有文件，如果不想上传所有文件，把”.”换成想要上传的文件名<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-built_in">add</span> . <br></code></pre></td></tr></table></figure></li></ul><p># <code>git status</code> 查看文件的状态命令</p><p># <code>git diff</code> 查看更新的详细信息命令</p><p># <code>git commit</code> 提交命令</p><p># <code>git reset HEAD</code> 取消缓存命令</p><p># <code>git rm</code> 删除命令</p><p># <code>git mv</code> 移动或重命名命令</p><p># Git 查看提交历史</p><ul><li>git log<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript">–oneline                           <span class="hljs-comment"># 查看历史记录的简洁版本</span><br>–graph                             <span class="hljs-comment"># 查看历史中什么时候出现了分支、合并</span><br>–<span class="hljs-built_in">reverse</span>                           <span class="hljs-comment"># 逆向显示所有日志</span><br>–author                            <span class="hljs-comment"># 查找指定用户的提交日志</span><br>–<span class="hljs-keyword">since</span>、–<span class="hljs-keyword">before</span>、 <span class="hljs-comment">--until、–after  # 指定筛选日期</span><br>–no-merges                         <span class="hljs-comment"># 选项以隐藏合并提交</span><br></code></pre></td></tr></table></figure>## 使用命令</li><li>查看历史记录的简洁版本<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">git <span class="hljs-built_in">log</span> –oneline<br></code></pre></td></tr></table></figure></li></ul><h1 id="创建本地分支-连接仓库-选取分支-上传或下载"><a href="#创建本地分支-连接仓库-选取分支-上传或下载" class="headerlink" title="创建本地分支-连接仓库-选取分支-上传或下载"></a>创建本地分支-连接仓库-选取分支-上传或下载</h1><p>修改数据-提交数据-上传数据</p><h2 id="处理本地仓库或远程仓库"><a href="#处理本地仓库或远程仓库" class="headerlink" title="处理本地仓库或远程仓库"></a>处理本地仓库或远程仓库</h2><h3 id="处理本地仓库命令"><a href="#处理本地仓库命令" class="headerlink" title="处理本地仓库命令"></a>处理本地仓库命令</h3><p># <code>git init</code> 初始化或创建一个 git 仓库，默认使用当前目录</p><ul><li><p>如果要在目录生成 .Git 仓库，则只需要执行如下命令：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure></li><li><p>如果要在指定的目录下生成仓库，则指令如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">git <span class="hljs-keyword">init</span> &lt;你的目录&gt;<br></code></pre></td></tr></table></figure><p># 获取最新代码</p></li><li><p>使用 git clone 命令可以从 Git 仓库拷贝项目，获取全部文件并创建本地仓库（git），类似于 SVN 中的 svn checkout，命令格式为：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">&lt;url</span>(仓库链接)&gt; [directory(目录)]<br></code></pre></td></tr></table></figure></li><li><p>url 为 git 仓库地址，directory 为本地目录，比如，要克隆某个 Git 代码仓库，可以用下面的命令：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>://github.com/schacon/grit.git [目录]<br></code></pre></td></tr></table></figure></li></ul><p>## 更新远程仓库的代码为最新的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">git <span class="hljs-keyword">fetch</span> <span class="hljs-comment">--all</span><br></code></pre></td></tr></table></figure><ul><li>git merge 将暂存区代码更新到本地工作区<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">git merge <span class="hljs-tag">&lt;<span class="hljs-name">你设立的远程仓库名</span>&gt;</span>/<span class="hljs-tag">&lt;<span class="hljs-name">远程分支名</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>## 让本地代码与 origin &#x2F; master 完全相同</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">reset</span> --hard <span class="hljs-built_in">origin</span>/master<br></code></pre></td></tr></table></figure><p>## <code>git pull</code> 拉取远程代码并合并到本地仓库的当前分支</p><p>### 已连接到远程仓库</p><ul><li>指定仓库分支拉取<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">git pull <span class="hljs-tag">&lt;<span class="hljs-name">仓库名</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">分支名</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>默认仓库分支拉取，需要将本地分支与远程分支链接<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git pull</span><br></code></pre></td></tr></table></figure></li></ul><p>### 没有连接到远程仓库</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">git pull <span class="hljs-tag">&lt;<span class="hljs-name">仓库链接</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="处理远程仓库命令"><a href="#处理远程仓库命令" class="headerlink" title="处理远程仓库命令"></a>处理远程仓库命令</h3><p># 查看当前的远程仓库</p><ul><li>只显示仓库名<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git remote</span><br></code></pre></td></tr></table></figure></li><li>获取详细信息，仓库名+仓库链接<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git remote -v</span><br></code></pre></td></tr></table></figure></li></ul><p># 连接和修改和删除远程仓库</p><p>## 连接远程仓库</p><ul><li><code>git remote add</code> 添加（连接）远程仓库<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> remote <span class="hljs-keyword">add</span> [<span class="hljs-meta">alias</span>/自拟仓库名字] [url/仓库链接]<br></code></pre></td></tr></table></figure></li><li>参数[alias]为别名， [url]为远程仓库的地址，如：我们可以将 <a href="https://github.com/qtqt/test.git">https://github.com/qtqt/test.git</a> 仓库添加到本地，并命名为test，操作如下：<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">git remote <span class="hljs-keyword">add</span><span class="language-bash"> <span class="hljs-built_in">test</span> https://github.com/qtqt/test.git</span><br></code></pre></td></tr></table></figure>## 修改已存在的仓库</li></ul><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">set-url</span> &lt;你设立的远程仓库名&gt; &lt;新的 <span class="hljs-string">URL</span>/仓库链接&gt;<br></code></pre></td></tr></table></figure><p>## 删除已连接的远程仓库 </p><ul><li><code>git remote rm</code> 删除已连接的远程仓库<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">git remote rm <span class="hljs-tag">&lt;<span class="hljs-name">你连接仓库时取得名字</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p># 获取数据和合并数据和上传数据</p><p>## 获取数据</p><ul><li>从远程获取最新版本到本地，不会自动合并。执行完成之后可以在本地仓库找到远程仓库的文件。使用这种方式只能保证本地是一个空的仓库，如果非空，则会报：fatal: refusing to merge unrelated histories 错误。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git fetch <span class="hljs-selector-attr">[仓库名]</span>/<span class="hljs-selector-attr">[分支名]</span><br></code></pre></td></tr></table></figure></li><li>默认获取全部仓库的全部分支的内容<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">git <span class="hljs-keyword">fetch</span> <span class="hljs-operator">-</span><span class="hljs-keyword">all</span><br></code></pre></td></tr></table></figure></li></ul><p>## 合并数据</p><ul><li>将获取的数据（数据已经在本地<strong>暂存区</strong>了）合并到你本地存储库（文件目录）当前的分支。操作如下。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">git merge <span class="hljs-tag">&lt;<span class="hljs-name">你设立的远程仓库名</span>&gt;</span>/<span class="hljs-tag">&lt;<span class="hljs-name">远程分支名</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>## 获取数据并合并数据</p><ul><li><code>git pull</code> 从远程获取最新版本并 merge 到本地你当前的分支。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git pull <span class="hljs-selector-attr">[仓库名]</span> <span class="hljs-selector-attr">[远程分支名]</span><br></code></pre></td></tr></table></figure></li></ul><p># <code>git push</code> 推送到远程仓库（上传文件到远程仓库），要先添加文件到本地分支，在上传。</p><ul><li>将本地分支推送到远程<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">git push <span class="hljs-tag">&lt;<span class="hljs-name">你设立的远程仓库名字</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">本地分支名</span>&gt;</span>:<span class="hljs-tag">&lt;<span class="hljs-name">远程分支名</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>HEAD：表示当前分支的最新提交。使用 HEAD 可以避免明确指定当前分支的名称。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">git push <span class="hljs-tag">&lt;<span class="hljs-name">你设立的远程仓库名字</span>&gt;</span> HEAD:<span class="hljs-tag">&lt;<span class="hljs-name">远程分支名</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>示例<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> -u <span class="hljs-built_in">origin</span> dev:release/caigou_v1<span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="Git-的分支管理"><a href="#Git-的分支管理" class="headerlink" title="Git 的分支管理"></a>Git 的分支管理</h2><p># 查看分支命令</p><ul><li>查看（列出）本地分支<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch</span><br></code></pre></td></tr></table></figure></li><li>查看远程所有分支<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git branch -<span class="hljs-attribute">r</span><br></code></pre></td></tr></table></figure></li><li>查看本地分支及链接的远程分支或本地分支<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>git branch -vv<br></code></pre></td></tr></table></figure></li><li>查看本地分支和远程分支 <code>git branch</code> 不带参数，列出本地已经存在的分支，并且在当前分支的前面用 <code>*</code> 标记，加上 <code>-a</code> 参数可以查看所有分支列表，包括本地和远程，远程分支一般会用<strong>红色字体</strong>标记出来。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git branch -<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><p>## 查看分支内的存在的文件</p><ul><li>查看文件列表，切换到分支后，你可以直接使用 <code>ls</code> 命令（在命令行中）查看当前目录中的文件和文件夹。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure></li><li>查看整个分支的文件树，如果你想查看分支中所有文件及其结构，而不是只查看当前目录，可以使用 <code>git ls-tree</code> 命令<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git ls-tree -<span class="hljs-attribute">r</span> &lt;分支名&gt; <span class="hljs-attr">--name-only</span><br></code></pre></td></tr></table></figure></li><li>例如：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git ls-tree -<span class="hljs-attribute">r</span> feature-branch <span class="hljs-attr">--name-only</span><br></code></pre></td></tr></table></figure></li></ul><p># 创建和切换和删除分支命令   </p><p>## 创建本地分支命令         </p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bnf">git branch <span class="hljs-attribute">&lt;branchname/分支名字&gt;</span><br></code></pre></td></tr></table></figure><p>## 切换本地分支命令 </p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bnf">git checkout <span class="hljs-attribute">&lt;branchname/分支名字&gt;</span><br></code></pre></td></tr></table></figure><p>## 创建本地分支并立即切换到该分支</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> checkout -<span class="hljs-keyword">b</span> &lt;branchname/分支名字&gt;<br></code></pre></td></tr></table></figure><p>### 创建本地分支并立即切换到该分支，然后链接到选定的远程存储库的分支</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bnf">git checkout -b <span class="hljs-attribute">&lt;branchname/本地分支名字&gt;</span> <span class="hljs-attribute">&lt;你设立的远程仓库名字&gt;</span>/<span class="hljs-attribute">&lt;远程分支名字&gt;</span>/<span class="hljs-attribute">&lt;文件夹1&gt;</span><br></code></pre></td></tr></table></figure><ul><li>示例：该命令可以将远程 git 仓库里的指定分支拉取到本地，这样就在本地新建了一个 dev 分支，并和指定的远程分支release&#x2F;caigou_v1.0 关联了起来。<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">git</span> checkout -b dev origin/release/caigou_v1.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure></li><li>如果远程新建了一个分支，本地没有该分支，可以利用 <code>git checkout --track origin/dev</code> ，这时本地会新建一个分支名叫 dev ，会自动跟踪远程的同名分支 dev<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">git checkout --track <span class="hljs-tag">&lt;<span class="hljs-name">仓库名</span>&gt;</span>/<span class="hljs-tag">&lt;<span class="hljs-name">分支名</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>## 删除分支命令 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">git branch -d <span class="hljs-tag">&lt;<span class="hljs-name">branchname</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>强制删除<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">git branch -D <span class="hljs-tag">&lt;<span class="hljs-name">要删除的分支</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p># 建立分支链接关系</p><ul><li>在当前分支输入该命令，就会与对应的远程分支建立关系。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">git branch -u <span class="hljs-tag">&lt;<span class="hljs-name">你设立的远程仓库名</span>&gt;</span>/<span class="hljs-tag">&lt;<span class="hljs-name">远程分支</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>写两个分支名的话远程分支写前面<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">git branch -u <span class="hljs-tag">&lt;<span class="hljs-name">你设立的远程仓库名</span>&gt;</span>/<span class="hljs-tag">&lt;<span class="hljs-name">远程分支</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>全写命令<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">git branch --set-upstream-to <span class="hljs-tag">&lt;<span class="hljs-name">你设立的远程仓库名</span>&gt;</span>/<span class="hljs-tag">&lt;<span class="hljs-name">远程分支</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p># <code>git merge</code> 合并远程的指定分支（已经拉取到本地）你当前的分支</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">git merge <span class="hljs-tag">&lt;<span class="hljs-name">你设立的远程仓库名</span>&gt;</span>/<span class="hljs-tag">&lt;<span class="hljs-name">远程分支名</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="上传文件到-GitHub"><a href="#上传文件到-GitHub" class="headerlink" title="上传文件到 GitHub"></a>上传文件到 GitHub</h2><p># <code>cd D:\文件名</code>: 选择你要上传的目录</p><ul><li>输入你想上传的文件的目录<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">cd <span class="hljs-tag">&lt;<span class="hljs-name">下一级文件名</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="上传文件步骤"><a href="#上传文件步骤" class="headerlink" title="上传文件步骤"></a>上传文件步骤</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-meta"># 初始化文件，创建本地仓库</span><br>git init<br><span class="hljs-meta"># 添加文件到暂存区，“.” 是全部文件</span><br>git <span class="hljs-keyword">add</span> &lt;README.md&gt;<br><span class="hljs-meta"># 描述信息，并提交文件到你本地仓库当前的分支</span><br>git commit -m <span class="hljs-string">&quot;first commit&quot;</span><br><span class="hljs-meta"># 连接到远程仓库（如果已连接则不需要）</span><br>git remote <span class="hljs-keyword">add</span> origin https: //github. <span class="hljs-keyword">com</span>/MrDCG/myfile.git<br><span class="hljs-meta"># 推送文件到远程仓库，`-u` 并设立链接（上下游）关系</span><br>git <span class="hljs-keyword">push</span> -u &lt;仓库名&gt; &lt;仓库的分支名&gt;<br></code></pre></td></tr></table></figure><h3 id="下载文件（拉取代码）并合并到本地分支（会合并到工作区）步骤"><a href="#下载文件（拉取代码）并合并到本地分支（会合并到工作区）步骤" class="headerlink" title="下载文件（拉取代码）并合并到本地分支（会合并到工作区）步骤"></a>下载文件（拉取代码）并合并到本地分支（会合并到工作区）步骤</h3><p># 一步完成拉取文件并合并到分支（前提已连接到仓库）。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-comment"># 连接仓库</span><br>git pull <span class="hljs-variable">&lt;你设立的远程仓库名&gt;</span> <span class="hljs-variable">&lt;远程分支名&gt;</span><br></code></pre></td></tr></table></figure><p># 分两步</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-comment"># 连接仓库</span><br><span class="hljs-comment"># 获取数据</span><br>git fetch [仓库名] [远程分支名]<br><span class="hljs-comment"># 默认合并数据到当前分支</span><br>git merge <span class="hljs-variable">&lt;你设立的远程仓库名&gt;</span>/<span class="hljs-variable">&lt;分支名&gt;</span><br></code></pre></td></tr></table></figure><h2 id="参考的文章"><a href="#参考的文章" class="headerlink" title="参考的文章"></a>参考的文章</h2><ul><li><a href="https://blog.csdn.net/m0_45234510/article/details/120181503">Git 克隆、拉取最新代码、上传代码到远程仓库</a></li><li><a href="https://blog.csdn.net/qtiao/article/details/97783243">Git 常用基本命令使用详细大全</a></li><li><a href="https://blog.csdn.net/m0_52108132/article/details/119413966">git 新建本地分支并关联远程分支</a></li><li><a href="https://blog.csdn.net/erhuobuer/article/details/89343380">上传文件到 GitHub 上的两种方法（纯新手可以看看）</a></li><li><a href="https://blog.csdn.net/astonishqft/article/details/83029490">git 切换到指定远程分支</a></li><li><a href="https://blog.csdn.net/k_young1997/article/details/90256789">Git 切换远程仓库地址三种方法</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/08/16/%E6%95%99%E7%A8%8B/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%20Hexo%20%E7%9A%84%E6%96%87%E7%AB%A0/"/>
    <url>/2024/08/16/%E6%95%99%E7%A8%8B/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%20Hexo%20%E7%9A%84%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="如何编写-Hexo-的文章"><a href="#如何编写-Hexo-的文章" class="headerlink" title="如何编写 Hexo 的文章"></a>如何编写 Hexo 的文章</h1><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><ul><li><a href="https://sspai.com/post/70220#!">如何用 Hexo 优雅的书写文章</a></li><li><a href="https://fuguigui.github.io/hexo2/">一次完整的 Hexo 写作流程</a></li><li><a href="https://hexo.io/docs/writing.html">https://hexo.io/docs/writing.html</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo 的使用方法</title>
    <link href="/2024/08/16/hexo%20%E7%9A%84%E6%96%87%E7%AB%A0%E7%BC%96%E5%86%99%E5%92%8C%E6%96%87%E7%AB%A0%E5%90%8C%E6%AD%A5%E6%95%99%E7%A8%8B/"/>
    <url>/2024/08/16/hexo%20%E7%9A%84%E6%96%87%E7%AB%A0%E7%BC%96%E5%86%99%E5%92%8C%E6%96%87%E7%AB%A0%E5%90%8C%E6%AD%A5%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo-的文章编写和文章同步教程"><a href="#hexo-的文章编写和文章同步教程" class="headerlink" title="hexo 的文章编写和文章同步教程"></a>hexo 的文章编写和文章同步教程</h1><h2 id="hexo-常用指令"><a href="#hexo-常用指令" class="headerlink" title="hexo 常用指令"></a>hexo 常用指令</h2><p># 生成静态网页<br>该命令执行后在hexo站点根目录下生成public文件夹<br><code>hexo g</code> 或 <code>hexo generate</code></p><p># 删除<code>public</code>文件夹<br><code>hexo clean</code></p><p># 打开本地服务器<br>启动服务，默认地址为<a href="http://localhost:4000/%EF%BC%8C4000%E7%AB%AF%E5%8F%A3">http://localhost:4000/，4000端口</a><br><code>hexo s</code> 或 &#96;hexo server&#96;&#96;</p><p># 部署站点，在本地生成<code>.deploy_git</code>文件夹，并将编译后的文件上传至 GitHub<br><code>hexo d</code>或<code>hexo deploy</code></p><p># 上传到 Github</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo <span class="hljs-selector-tag">g</span> -d<br></code></pre></td></tr></table></figure><h2 id="文章编写"><a href="#文章编写" class="headerlink" title="文章编写"></a>文章编写</h2><p># 创建一个新的文章</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;文章名字&quot;</span><br></code></pre></td></tr></table></figure><h2 id="参考的文章"><a href="#参考的文章" class="headerlink" title="参考的文章"></a>参考的文章</h2><p><a href="https://blog.csdn.net/vpqtxzmzezeqjj9977/article/details/122982320">Hexo的常用指令合集_hexo命令-CSDN博客</a></p><p>#教程 #指令</p>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Joplin 的使用教程</title>
    <link href="/2024/08/16/%E6%95%99%E7%A8%8B/Joplin%20%E7%9A%84%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2024/08/16/%E6%95%99%E7%A8%8B/Joplin%20%E7%9A%84%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Joplin-使用技巧"><a href="#Joplin-使用技巧" class="headerlink" title="Joplin 使用技巧"></a>Joplin 使用技巧</h1><h2 id="其他教程"><a href="#其他教程" class="headerlink" title="其他教程"></a>其他教程</h2><ul><li><a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/README-zh_CN.md">提问的智慧</a></li></ul><h2 id="Joplin-使用"><a href="#Joplin-使用" class="headerlink" title="Joplin 使用"></a>Joplin 使用</h2><blockquote><p><a href="https://www.bilibili.com/read/cv18070368/">https://www.bilibili.com/read/cv18070368/</a></p></blockquote><h3 id="Jopin-插件"><a href="#Jopin-插件" class="headerlink" title="Jopin 插件"></a>Jopin 插件</h3><ul><li><a href="https://github.com/ylc395/joplin-plugin-better-markdown-viewer">joplin-plugin-better-markdown-viewer</a></li><li><a href="https://blog.17lai.site/posts/92d347d6/">blog.17lai.site</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/08/16/hello-world(%E6%B5%8B%E8%AF%95)/"/>
    <url>/2024/08/16/hello-world(%E6%B5%8B%E8%AF%95)/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
